generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  email             String   @unique
  password          String 
  isSocialLogin     Boolean? @default(false)
  username          String?  @unique
  fullName          String?
  description       String?
  profileImage      String?
  isProfileInfoSet  Boolean? @default(false)
  createdAt         DateTime @default(now())
  gigs              Gigs[]
  orders            Orders[]
  reviews           Reviews[]
  messagesSent      Message[] @relation("sentMessages")
  messagesReceived  Message[] @relation("receivedMessages")
}

model Gigs {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String 
  description String
  category    String
  deliveryTime Int
  revisions   Int
  features    String[]
  price       Int
  shortDesc   String
  createdAt   DateTime @default(now())
  images      String[]
  createdById String   @db.ObjectId  // Foreign key for User
  createdBy   User     @relation(fields: [createdById], references: [id])
  orders      Orders[]
  reviews     Reviews[]
}

model Orders {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime @default(now())
  buyerId      String   @db.ObjectId  // Foreign key for User
  buyer        User     @relation(fields: [buyerId], references: [id])
  paymentIntent String   @unique
  isCompleted   Boolean  @default(false)
  gigId        String   @db.ObjectId  // Foreign key for Gigs
  gig          Gigs     @relation(fields: [gigId], references: [id])
  price        Int
  messages     Message[]
}

model Reviews {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  rating     Int
  reviewText String?
  gigId      String   @db.ObjectId  // Foreign key for Gigs
  gig        Gigs     @relation(fields: [gigId], references: [id])
  reviewerId String   @db.ObjectId  // Foreign key for User
  reviewer    User     @relation(fields: [reviewerId], references: [id])
}

model Message {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  text        String
  createdAt   DateTime @default(now())
  isRead      Boolean  @default(false)
  senderId    String   @db.ObjectId  // Foreign key for User
  sender      User     @relation("sentMessages", fields: [senderId], references: [id])
  recipientId String   @db.ObjectId  // Foreign key for User
  recipient   User     @relation("receivedMessages", fields: [recipientId], references: [id])
  orderId     String   @db.ObjectId  // Foreign key for Orders
  order       Orders   @relation(fields: [orderId], references: [id])
}
